buildscript {
	repositories {
		jcenter()
	}
}

plugins {
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'java'
	id 'java-library'
	id 'maven-publish'
	id 'jacoco'
	id "org.sonarqube" version "2.7"
}

group = 'com.github.jferrater'
archivesBaseName = ARTIFACT_NAME
version = ARTIFACT_VERSION
sourceCompatibility = '17'

repositories {
	mavenLocal()
	mavenCentral()
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	api 'com.github.jferrater:opa-datafilter-core:0.6.0'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	testImplementation group: 'com.h2database', name: 'h2', version: '2.2.224'
	testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

test {
	useJUnitPlatform()
	options {
	}
	finalizedBy jacocoTestReport // report is always generated after tests run
}

sonarqube {
	properties {
		property 'sonar.projectName', 'opa-datafilter-jpa-spring-boot-starter'
		property 'sonar.github.repository', 'jferrater/opa-data-filter-spring-boot-starter'
		property 'sonar.projectKey', 'jferrater_opa-datafilter-jpa-spring-boot-starter'
		property 'sonar.organization', 'jferrater'
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.projectVersion', version
		property 'sonar.login', System.getenv('SONAR_TOKEN')
		property 'sonar.java.coveragePlugin', 'jacoco'
		property 'sonar.exclusions', '**/integrationTest/**, src/main/java/**/**config/*.java'
	}
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			groupId = 'com.github.jferrater'
			artifactId = ARTIFACT_NAME
			version = ARTIFACT_VERSION
			from components.java
		}
	}
}

