buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'maven-publish'
    id 'java'
    id 'java-library'
    id 'jacoco'
    id "org.sonarqube" version "2.7"
    id 'org.unbroken-dome.test-sets' version '4.1.0'
}

jacoco {
    toolVersion = '0.8.9'
}


group = 'com.github.jferrater'
archivesBaseName = ARTIFACT_NAME
version = ARTIFACT_VERSION
sourceCompatibility = '17'

repositories {
    mavenLocal()
    mavenCentral()
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

dependencies {
    api group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    api group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    testImplementation 'org.mariadb.jdbc:mariadb-java-client:3.3.1'
    testImplementation group: 'org.postgresql', name: 'postgresql', version: '42.7.1'
    testImplementation group: 'org.testcontainers', name: 'mysql', version: '1.19.3'
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.19.3'
    testImplementation group: 'com.h2database', name: 'h2', version: '2.2.224'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

testSets {
    integrationTest
}

test {
    useJUnitPlatform()
    options {
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

integrationTest {
    useJUnitPlatform()
    integrationTest.outputs.upToDateWhen { false }
    failFast = true
    dependsOn 'cleanIntegrationTest'

    testLogging {
        events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
    }
}

sonarqube {
    properties {
        property 'sonar.projectName', 'opa-datafilter-core'
        property 'sonar.github.repository', 'jferrater/opa-data-filter-spring-boot-starter'
        property 'sonar.projectKey', 'jferrater_opa-datafilter-core'
        property 'sonar.organization', 'jferrater'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.projectVersion', version
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.exclusions', '**/integrationTest/**, **/**/config/*.java, **/**/model/**'
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            groupId = 'com.github.jferrater'
            artifactId = ARTIFACT_NAME
            version = ARTIFACT_VERSION
            from components.java
        }
    }
}
